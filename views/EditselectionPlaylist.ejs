<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Document</title>
  <link rel="stylesheet" href="/css/groupScreen.css" />
  <!-- <link rel="stylesheet" href="/css/screen.css" /> -->

  <script>  
    const screenIDS=sessionStorage.getItem('screenIDS');
    console.log("screenIDS",screenIDS);
  </script>
<style>
  .goback{
    Padding: 12px 20px;
    border: 1px solid #0D6EFD;
    font-weight: 700;
    color: #0D6EFD;
    background: transparent;
  }
  .header{
    display: flex;
    justify-content: flex-end;
    
  }
</style>
</head>

<body>
  <div class="group">
    <div class="header">
      <!-- <div class="group-screen">
        <p>Home > <b>Group Screen</b></p>
      </div> -->
      <div class="group-screen-btn">
        <!-- <button onclick="deletePlaylist()">Delete</button> -->
        <button class="goback" onclick="goback()">Go Back</button>
        <button onclick="publishPlaylist()">Publish</button>
         <!-- <button3 onclick="deletePlaylist3()">Delete</button3> -->
      </div>
    </div>
    <div class="heading">
      <h3>Select Screens to Publish Playlist</h3>
    
    </div>
    <div class="selection-screens">
      <div class="select-screen">
        <table>
          <thead>
            <tr>
              <th></th>
              <th>Screen ID</th>
              <th>Address</th>
              <th>SCREEN NAME</th>
            </tr>
          </thead>
          <tbody>
            <% if (screens && screens.length) { %>
              <% screens.forEach(screen => { %>
                <tr>
                  <td>
                    <input type="checkbox" name="checkbox" value="<%= screen.screenid %>"/>
                  </td>
                  <td><%= screen.screenid %></td>
                  <td><%= screen.location %></td>
                  <td><%= screen.screenname %></td>
                </tr>
              <% }) %>
            <% } else { %>
              <tr>
                <td colspan="6">No screens found</td>
              </tr>
            <% } %>
          </tbody>
        </table>
      </div>

      



    </div>
    
  </div>
 


 <script>
 


  function goback() {
            if (confirm("Are you sure you want to exit and discard changes?")) {
                window.history.back();
            }
        }

  document.addEventListener("DOMContentLoaded", () => {
  const playlistId = sessionStorage.getItem("playlistId");
  const playlistName = sessionStorage.getItem("playlistName");
  const rawScreenIDs = sessionStorage.getItem("screenIDS"); // Get the raw string
  const screenIDs = rawScreenIDs ? rawScreenIDs.replace(/[{}]/g, "").split(",").map(id => id.trim().replace(/"/g, "")) : []; // Process the raw string into an array
  const playlistDescription = sessionStorage.getItem("playlistDescription");
  const playlistUrls = sessionStorage.getItem("playlistUrls");
  const urls = JSON.parse(playlistUrls);
  let selectedScreens = [...screenIDs]; // Initialize with screenIDs from sessionStorage

  // Function to initialize checkboxes based on screenIDs from sessionStorage
  function initializeCheckboxes() {
    const checkboxes = document.querySelectorAll('input[name="checkbox"]');
    checkboxes.forEach((checkbox) => {
      if (selectedScreens.includes(checkbox.value)) {
        checkbox.checked = true;
      }
    });
  }

  initializeCheckboxes();

  async function publishPlaylist() {
    const checkboxes = document.querySelectorAll('input[name="checkbox"]:checked');
    checkboxes.forEach((checkbox) => {
      if (!selectedScreens.includes(checkbox.value)) {
        selectedScreens.push(checkbox.value);
      }
    });

    if (selectedScreens.length === 0) {
      alert("Please select at least one screen");
      return;
    }

    console.log("playlistId", playlistId);
    console.log("playlistName", playlistName);
    console.log("playlistDescription", playlistDescription);
    console.log("selectedUrls", urls);
    console.log("selectedScreens", selectedScreens);

    try {
      const response = await fetch("/Dashboard/Playlist/editPlaylist", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          playlistId:playlistId,
          screenIDs: selectedScreens,
          urls: urls,
          playlistName: playlistName,
          playlistDescription: playlistDescription,
        }),
      });
      if (!response.ok) {
        throw new Error("Failed to edit playlist");
      }
      const responseData = await response.json();
      console.log("Playlist edit:", responseData.playlist);
      alert("Playlist edited successfully!");
      window.location.href = '/Dashboard/Playlist';
    } catch (error) {
      console.error("Error editing playlist:", error);
      alert("Failed to edit playlist. Please try again.");
    }
  }

  window.publishPlaylist = publishPlaylist;
});




</script>


</body>

</html>
